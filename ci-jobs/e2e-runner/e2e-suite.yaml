apiVersion: batch/v1
kind: Job
metadata:
  name: e2e-suite
  labels:
    jobgroup: ansible-runner
spec:
  backoffLimit: 0
  template:
    metadata:
      name: e2e-suite
      labels:
        jobgroup: ansible-runner
    spec:
      backoffLimit: 0
      terminationGracePeriodSeconds: 900
      containers:
      - name: setup
        image: quay.io/openshift/origin-ovirt-installer:latest
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - name: shared-tmp
          mountPath: /tmp/shared
        - name: cluster-profile
          mountPath: /etc/openshift-installer
        - name: installer-artifacts
          mountPath: /tmp/shared/artifacts
        env:
        - name: SSH_PUB_KEY_PATH
          value: /etc/openshift-installer/ssh-publickey
        - name: PULL_SECRET_PATH
          value: /etc/openshift-installer/pull-secret
        - name: OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE
          value: registry.svc.ci.openshift.org/ocp/release:4.5-ci
        - name: ACQUIRE_LEASE
          value: "false"
        - name: USE_OVIRT_TEMPLATE
          value: "true"
        - name: RUN_TYPE
          value: "conformance"
        command:
        - /bin/sh
        - -c
        - |
          #!/bin/sh
          trap 'rc=$?; if test "${rc}" -eq 0; then touch /tmp/shared/01_install.done; else touch /tmp/shared/01_install.exit; fi; exit "${rc}"' EXIT
          trap 'CHILDREN=$(jobs -p); if test -n "${CHILDREN}"; then kill ${CHILDREN} && wait; fi' TERM

          function acquire_lease() {

            function boskos_heartbeat() {
              while true; do
                curl -X POST -k "http://boskos.ci/update?name=${1}&state=leased&owner=ovirt-manual-run"
                sleep 1m
              done
            }

            function extract_leases_info() {
              echo "$( jq ."${1}" --raw-output "${2}" )"
            }

            function release() {
              echo "killing heartbeat process "${heartbeats_pid}" at $(date --utc)"
              kill -9 "${heartbeats_pid}"
              echo "[INFO] Releasing the lease on resouce ${resource_name}"
              curl -X POST -k "http://boskos.ci/release?name=${resource_name}&dest=free&owner=ovirt-manual-run"
              if [ "${RUN_TYPE}" == "conformance" ]; then
                echo "killing heartbeat process "${heartbeats_conformance_pid}" at $(date --utc)"
                kill -9 "${heartbeats_conformance_pid}"
                echo "[INFO] Releasing the lease on resouce ${resource_conformance}"
                curl -X POST -k "http://boskos.ci/release?name=${resource_conformance_name}&dest=free&owner=ovirt-manual-run"
              fi
            }

            trap "release" EXIT
            trap "release" TERM

            resource="$(curl -X POST -k 'http://boskos.ci/acquire?type=ovirt-quota-slice&state=free&dest=leased&owner=ovirt-manual-run')"
            resource_name="$(echo "${resource}"|jq .name --raw-output)"
            lease_path="/etc/openshift-installer/${resource_name}.json"
            echo "[INFO] Lease acquired! at $(date --utc) Leased resource: ${resource}"
            echo "[INFO] Sending heartbeats to retain the lease ${resource_name}"
            boskos_heartbeat "${resource_name}" &
            heartbeats_pid=$!
            if [ "${RUN_TYPE}" == "conformance" ]; then
              resource_conformance="$(curl -X POST -k 'http://boskos.ci/acquire?type=ovirt-quota-slice&state=free&dest=leased&owner=ovirt-manual-run')"
              resource_conformance_name="$(echo "${resource_conformance}"|jq .name --raw-output)"
              echo "[INFO] Lease acquired! at $(date --utc) Leased resource: ${resource_conformance}"
              boskos_heartbeat "${resource_conformance_name}" &
              heartbeats_conformance_pid=$!
            fi
            cat > /tmp/shared/ovirt-lease.conf <<EOF
            OVIRT_APIVIP="$(extract_leases_info ovirt_apivip ${lease_path})"
            OVIRT_DNSVIP="$(extract_leases_info ovirt_dnsvip ${lease_path})"
            OVIRT_INGRESSVIP="$(extract_leases_info ovirt_ingressvip ${lease_path})"
            OCP_CLUSTER="$(extract_leases_info cluster_name ${lease_path})"
            OVIRT_ENGINE_CLUSTER_ID="$(extract_leases_info ovirt_engine_cluster_id ${lease_path})"
            OVIRT_ENGINE_TEMPLATE_NAME="$(extract_leases_info ovirt_engine_template_name ${lease_path})"
          EOF
          }

          function set_fake_lease_parameters() {
            cat > /tmp/shared/ovirt-lease.conf <<EOF
            OVIRT_APIVIP="192.168.218.30"
            OVIRT_DNSVIP="192.168.218.31"
            OVIRT_INGRESSVIP="192.168.218.32"
            OCP_CLUSTER="ovirt18"
            OVIRT_ENGINE_CLUSTER_ID="a62b1b9c-881a-46b1-9a39-8ea4c89384ca"
            OVIRT_ENGINE_TEMPLATE_NAME="rhcos-master-18"
            OVIRT_ENGINE_STORAGE_DOMAIN_ID="be98a22b-4634-4282-ad34-14ad15553835"
            OVIRT_ENGINE_URL="https://engine.rhv44.gcp.devcluster.openshift.com/ovirt-engine/api"
          EOF
          }

          function set_master_worker_parameters() {
            if [ "${RUN_TYPE}" == "conformance" ]; then
              WORKER_CPU="8"
              WORKER_MEM="16384"
              MASTER_CPU="8"
              MASTER_MEM="16384"
            else
              WORKER_CPU="4"
              WORKER_MEM="8192"
              MASTER_CPU="4"
              MASTER_MEM="8192"
              OVIRT_ENGINE_TEMPLATE_NAME="${OVIRT_ENGINE_TEMPLATE_NAME}-8G"
            fi
          }

          function create_ovirt_config() {
            # We want the setup to download the latest CA from the engine therefor living it empty
            export OVIRT_CONFIG=/tmp/shared/artifacts/installer/ovirt-config.yaml
            cat > /tmp/shared/artifacts/installer/ovirt-config.yaml <<EOF
            ovirt_url: ${OVIRT_ENGINE_URL}
            ovirt_username: ${OVIRT_ENGINE_USERNAME}
            ovirt_password: ${OVIRT_ENGINE_PASSWORD}
            ovirt_cafile: ""
            ovirt_insecure: true
          EOF
          }

          function export_vars() {
            export EXPIRATION_DATE=$(date -d '4 hours' --iso=minutes --utc)
            export SSH_PUB_KEY=$(cat "${SSH_PUB_KEY_PATH}")
            export PULL_SECRET=$(cat "${PULL_SECRET_PATH}")
            export TF_VAR_ovirt_template_mem=${WORKER_MEM}
            export TF_VAR_ovirt_template_cpu=${WORKER_CPU}
            export TF_VAR_ovirt_master_mem=${MASTER_MEM}
            export TF_VAR_ovirt_master_cpu=${MASTER_CPU}
          }

          function create_install_config() {
            cat > /tmp/shared/artifacts/installer/install-config.yaml <<EOF
            apiVersion: v1
            baseDomain: ${BASE_DOMAIN}
            metadata:
              name: ${OCP_CLUSTER}
            compute:
            - hyperthreading: Enabled
              name: worker
              platform:
                ovirt:
                  cpu:
                    cores: ${WORKER_CPU}
                    sockets: 1
                  memoryMB: ${WORKER_MEM}
                  osDisk:
                    # 31 is used to trigger the instance customization (the disk size is 16 Gi)
                    sizeGB: 31
                  vmType: server
                  instanceTypeID:
              replicas: 2
            controlPlane:
              hyperthreading: Enabled
              name: master
              platform:
                ovirt:
                  cpu:
                    cores: ${MASTER_CPU}
                    sockets: 1
                  memoryMB: ${MASTER_MEM}
                  osDisk:
                    # 31 is used to trigger the instance customization (the disk size is 16 Gi)
                    sizeGB: 31
                  vmType: server
                  instanceTypeID:
              replicas: 3
            platform:
              ovirt:
                ovirt_cluster_id: ${OVIRT_ENGINE_CLUSTER_ID}
                ovirt_storage_domain_id: ${OVIRT_ENGINE_STORAGE_DOMAIN_ID}
                api_vip: ${OVIRT_APIVIP}
                dns_vip: ${OVIRT_DNSVIP}
                ingress_vip: ${OVIRT_INGRESSVIP}
            pullSecret: >
              ${PULL_SECRET}
            sshKey: |
              ${SSH_PUB_KEY}
          EOF
          }

          function download_oc() {
            pushd /tmp/shared/artifacts
            echo "downloading oc binary"
            wget https://mirror.openshift.com/pub/openshift-v4/clients/oc/4.5/linux/oc.tar.gz -O oc.tar.gz
            tar xvfz oc.tar.gz
            chmod +x ./oc
            popd
          }

          function download_jq() {
            pushd /tmp/shared/artifacts
            wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 -O jq
            chmod +x ./jq
            popd
          }

          function update_image_registry() {
            while true; do
              sleep 10;
              oc get configs.imageregistry.operator.openshift.io/cluster >/dev/null 2>&1 && break
            done
            oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"managementState":"Managed","storage":{"emptyDir":{}}}}'
          }

          mkdir -p /tmp/shared/artifacts/installer
          export PATH=$PATH:/tmp/shared:/tmp/shared/artifacts
          download_jq
          if [ "$ACQUIRE_LEASE" == "true" ]; then
            acquire_lease
          else
            set_fake_lease_parameters
          fi

          source /etc/openshift-installer/ovirt.conf
          source /tmp/shared/ovirt-lease.conf

          set_master_worker_parameters
          create_ovirt_config
          export_vars
          if [ "$USE_OVIRT_TEMPLATE" == "true" ]; then
            export OPENSHIFT_INSTALL_OS_IMAGE_OVERRIDE="${OVIRT_ENGINE_TEMPLATE_NAME}"
          fi

          create_install_config

          #download oc if missing
          if [ ! -f oc ] ; then
            download_oc
          fi

          cat /tmp/shared/artifacts/installer/install-config.yaml
          cp "$(command -v openshift-install)" /tmp/shared/
          #Done with configuration we can install now

          TF_LOG=debug openshift-install --dir=/tmp/shared/artifacts/installer create ignition-configs --log-level=debug
          echo "done with ignition-configs"

          python -c \
              'import json, sys; j = json.load(sys.stdin); j[u"systemd"][u"units"] = [{u"contents": "[Unit]\nDescription=Mount etcd as a ramdisk\nBefore=local-fs.target\n[Mount]\n What=none\nWhere=/var/lib/etcd\nType=tmpfs\nOptions=size=2G\n[Install]\nWantedBy=local-fs.target", u"enabled": True, u"name":u"var-lib-etcd.mount"}]; json.dump(j, sys.stdout)' \
              </tmp/shared/artifacts/installer/master.ign \
              >/tmp/shared/artifacts/installer/master.ign.out
          mv /tmp/shared/artifacts/installer/master.ign.out /tmp/shared/artifacts/installer/master.ign

          export KUBECONFIG=/tmp/shared/artifacts/installer/auth/kubeconfig
          update_image_registry &

          # What were doing here is we generate manifests first and force that OpenShift SDN is configured.
          TF_LOG=debug openshift-install --dir=/tmp/shared/artifacts/installer create manifests --log-level=debug

          sed -i '/^  channel:/d' /tmp/shared/artifacts/installer/manifests/cvo-overrides.yaml
          echo "done with manifests"

          TF_LOG=debug openshift-install --dir=/tmp/shared/artifacts/installer create cluster --log-level=debug

          install_exit_status=$?
          exit $install_exit_status

      - name: run-tests
        image: quay.io/openshift/origin-tests:latest
        imagePullPolicy: IfNotPresent
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - name: config-gcp-secrets
          mountPath: /runner/gcp-secrets
        - name: shared-tmp
          mountPath: /tmp/shared
        - name: cluster-profile
          mountPath: /etc/openshift-installer
        - name: installer-artifacts
          mountPath: /tmp/shared/artifacts
        env:
        - name: TEST_COMMAND
          value: conformance-tests
        - name: EXIT_ON_FINISH
          value: "false"
        resources:
          requests:
            cpu: 4
            memory: 600Mi
          limits:
            memory: 4Gi
        command:
        - /bin/sh
        - -c
        - |
          #!/bin/bash
          trap 'rc=$?;  touch /tmp/shared/02_tests.done ; exit "${rc}"' EXIT
          trap 'CHILDREN=$(jobs -p); if test -n "${CHILDREN}"; then kill ${CHILDREN} && wait; fi' TERM

          set -euo pipefail
          echo "waiting for installation to complete..."
          while true; do
            if [[ -f /tmp/shared/01_install.done ]]; then
              break
            fi
            sleep 20 & wait
          done
          echo "beginning testing..."

          export PATH=$PATH:/tmp/shared:/tmp/shared/artifacts
          export KUBECONFIG=/tmp/shared/artifacts/installer/auth/kubeconfig
          cd /tmp/shared/artifacts
          mkdir -p junit/

          function conformance-tests() {
            openshift-tests run "openshift/conformance/parallel \
              --provider '{"type":"ovirt"}' -o run_conformance.log -junit-dir junit/
          }

          function minimal-tests() {
            # Grab all of the tests marked Feature:Builds and conformance/parallel/minimal
            openshift-tests run openshift/conformance/parallel --dry-run |
              grep 'Early' |
            openshift-tests run -o run_conformance.log --provider '{"type":"ovirt"}' \
              -junit-dir junit/ -f -
          }

          function run-no-tests() {
            # This can be used if we just want to check the installer exits 0
            echo "WARNING: No tests were run against the installed cluster"
            return 0
          }

          source /etc/openshift-installer/ovirt.conf
          source /tmp/shared/ovirt-lease.conf
          curl -k --connect-timeout 2 --retry 30 --retry-delay 30 https://api.${OCP_CLUSTER}.gcp.devcluster.openshift.com:6443/apis/config.openshift.io/v1/infrastructures/cluster
          ${TEST_COMMAND}

          if [ "$EXIT_ON_FINISH" == "false" ]; then
            sleep 360m
          fi

          #We set OVIRT_CONFIG and insert he path to the engine ca to the config file
          export OVIRT_CONFIG=/tmp/shared/artifacts/installer/ovirt-config.yaml
          curl -k -o "/tmp/shared/artifacts/installer/ovirt-engine.ca" ${OVIRT_ENGINE_URL::-4}/services/pki-resource?resource=ca-certificate
          sed 's|ovirt_cafile: ""|ovirt_cafile: /tmp/shared/artifacts/installer/ovirt-engine.ca|' -i /tmp/shared/artifacts/installer/ovirt-config.yaml
          echo "Destroy bootstrap ..."
          openshift-install --dir /tmp/shared/artifacts/installer destroy bootstrap
          echo "Destroy cluster ..."
          openshift-install --dir /tmp/shared/artifacts/installer destroy cluster
          # Clean up
          rm -f /tmp/shared/artifacts/installer/ovirt-config.yaml


      volumes:
        - name: config-gcp-secrets
          secret:
            secretName: ovirt-infra-gcp-secrets
        - name: cluster-profile
          projected:
            sources:
            - secret:
                name: cluster-secrets-ovirt
            - secret:
                name: ovirt-infra-secrets
        - name: shared-tmp
          emptyDir: {}
        - name: installer-artifacts
          emptyDir: {}
        - name: scripts
          configMap:
            name: ocp-on-rhv-ci-scripts
      restartPolicy: Never
